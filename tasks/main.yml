---
- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
  tags:
    - always

- name: Ensure certbot directories exists
  file:
    dest: "{{ item }}"
    state: directory
  with_items:
    - /opt/certbot
    - /var/log/certbot
    - "{{ letsencrypt_webroot }}"

- name: Download certbot installer
  get_url:
    url: https://dl.eff.org/certbot-auto
    dest: /opt/certbot/certbot-auto
    mode: 0755
    validate_certs: False

#- name: Verify if port 80 is serving files
#  command: curl -sf http://{{ letsencrypt_domain }}/.well-known
#  register: http_code
#  ignore_errors: true

- name: Disable firewall
  command: iptables -P INPUT ACCEPT
  when: letsencrypt_firewall
  tags: skip_ansible_lint

- name: Generate certificate
  command: "./certbot-auto certonly -n --agree-tos --standalone --email {{ letsencrypt_email }} {{ '-d ' + item }} --preferred-challenges {{ letsencrypt_challenge }} {{ '--http-01-port' if letsencrypt_challenge.startswith('http') else '--tls-sni-01-port' }} {{ letsencrypt_bind_port }}"
  args:
    chdir: /opt/certbot
    creates: "/etc/letsencrypt/live/{{ item }}/cert.pem"
  with_items: "{{ letsencrypt_domains }}"
  when: letsencrypt_domains != []

#- name: Generate ceritifacte when port 80 is in use
#  command: "./certbot-auto certonly -n --agree-tos --email {{ letsencrypt_email }} --webroot -w {{ letsencrypt_webroot }} -d {{ letsencrypt_domain }}"
#  args:
#    chdir: /opt/certbot
#  when: http_code == 200

- name: Reenable firewall
  command: iptables -P INPUT DROP
  when: letsencrypt_firewall
  tags: skip_ansible_lint

- name: Ensure cron is installed
  package:
    name: "{{ cron_packages }}"
    state: installed
  when: letsencrypt_autorenew

- name: Enable autorenew every day [without firewall]
  cron:
    name: letsencrypt
    cron_file: /etc/crontab
    user: root
    minute: 21
    hour: 1
    job: "/opt/certbot/certbot-auto renew --webroot -w {{ letsencrypt_webroot }} --text >> /var/log/letsencrypt/renewal.log --post-hook 'systemctl restart {{ letsencrypt_http_server }}'"
  when:
    - letsencrypt_autorenew
    - not letsencrypt_firewall

- name: Enable autorenew every day [with ingress firewall]
  cron:
    name: letsencrypt
    cron_file: /etc/crontab
    user: root
    minute: 21
    hour: 1
    job: "iptables -P INPUT ACCEPT; /opt/certbot/certbot-auto renew --webroot -w {{ letsencrypt_webroot }} --text >> /var/log/letsencrypt/renewal.log --post-hook 'systemctl restart {{ letsencrypt_http_server }}'; iptables -P INPUT DROP"
  when:
    - letsencrypt_autorenew
    - letsencrypt_firewall
